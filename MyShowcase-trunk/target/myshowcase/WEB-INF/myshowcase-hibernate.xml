<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>


	<!--  Shared DataSource for all pooled database connections 
  	--> 
	<bean id="myshowcase.javax.sql.DataSource" parent="myshowcase.javax.sql.BaseDataSource" lazy-init="default" autowire="default" dependency-check="default" /> 


	<bean id="myshowcase.javax.sql.LazyDataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy" lazy-init="default" autowire="default" dependency-check="default">
	 	<property name="targetDataSource">
  			<ref local="myshowcase.javax.sql.DataSource" /> 
  		</property>
  	</bean>
 
  	
   	<!--  Base Hibernate SessionFactory 
 	 --> 
 	<bean id="myshowcase.javax.sql.BaseDataSource" abstract="true" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="default" autowire="default" dependency-check="default">
 		<!--   The fully qualified Java class name of the JDBC driver to be used. 
  		--> 
		<property name="driverClassName">
 			<value>${databaseDriverClassName}</value>
  		</property>
  		
 		<!--  The connection URL to be passed to our JDBC driver to establish a connection. 
  		--> 
 		<property name="url">
 			<value>${databaseUrl}</value>
  		</property>
  		
 		<!--  The connection username to be passed to our JDBC driver to establish a connection. 
  		--> 
 		<property name="username">
  			<value>${databaseUsername}</value> 
  		</property>
  		
 		<!--  The connection password to be passed to our JDBC driver to establish a connection. 
  		--> 
 		<property name="password">
  			<value>${databasePassword}</value> 
  		</property>
  		
 		<!--   The initial number of connections that are created when the pool is started. 
 		 --> 
 		<property name="initialSize">
  			<value>${connectionPoolInitialSize}</value> 
  		</property>
  		
 		<!--  The maximum number of active connections that can be allocated from this pool at the same time, or negative for no limit. 
  		--> 
 		<property name="maxActive">
  			<value>${connectionPoolMaxActive}</value> 
  		</property>
  		
 		<!--  The maximum number of active connections that can remain idle in the pool, without extra ones being released, or negative for no limit. 
  		--> 
 		<property name="maxIdle">
  			<value>${connectionPoolMaxIdle}</value> 
  		</property>
  		
 		<!--  The minimum number of active connections that can remain idle in the pool, without extra ones being created, or 0 to create none. 
  		--> 
 		<property name="minIdle">
  			<value>${connectionPoolMinIdle}</value> 
  		</property>
  		
 		<!-- 
 			The maximum number of milliseconds that the pool will wait (when there
		  	are no available connections) for a connection to be returned before
		  	throwing an exception, or -1 to wait indefinitely. 

  		--> 
 

 		<property name="maxWait">
  			<value>300000</value> 
  		</property>
  		
 		<!-- The number of objects to examine during each run of the idle object
		  evictor thread (if any). -->
		<property name="numTestsPerEvictionRun">
			<value>3</value>
		</property>

		<!--  The indication of whether objects will be validated before being
		  borrowed from the pool. If the object fails to validate, it will be
		  dropped from the pool, and we will attempt to borrow another.
		  Note: this has been shown to cause performance problems with Oracle (leave it false) -->
		<property name="testOnBorrow">
			<value>true</value>
		</property>

		<!-- The indication of whether objects will be validated before being
		  returned to the pool. -->
		<property name="testOnReturn">
			<value>false</value>
		</property>

		<!-- The indication of whether objects will be validated by the idle object
		  evictor (if any). If an object fails to validate, it will be dropped from
		  the pool. -->
		<property name="testWhileIdle">
			<value>false</value>
		</property>

		<!-- The SQL query that will be used to validate connections from this pool
		  before returning them to the caller. If specified, this query MUST be a
		  SQL SELECT statement that returns at least one row.
		  Note: This has been shown to cause performance problems under Oracle: leave it unset. -->
		  
	  
		<property name="validationQuery">
			<value>${validationQuery}</value>
		</property>
 	  		

 	 </bean>



    <!-- Create a sessionFactory and give this your HBM files so the session factory can use them, creates a tool specific bean rather than
        using the shared session factory -->
    <bean id="myshowcase.hibernate.SessionFactory" 
            parent="myshowcase.springramework.orm.hibernate.SessionFactoryBase">
           
        <property name="mappingResources" ref="myshowcase.HBMMappingList" />
    </bean>

<!--  
 	<bean id="myshowcase.springramework.orm.hibernate.SessionFactoryBase" abstract="true"
 	 	class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
 	  	lazy-init="default" autowire="default" dependency-check="default">
 -->
 	<bean id="myshowcase.springramework.orm.hibernate.SessionFactoryBase" abstract="true"
 	 	class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
 	  	
 		<property name="dataSource">
  			<ref local="myshowcase.javax.sql.LazyDataSource" /> 
  		</property>
		
 		<property name="hibernateProperties">
 		
 			<props>
  				<prop key="hibernate.dialect">${hibernateDialect}</prop> 				
  				<prop key="hibernate.query.factory_class">org.hibernate.hql.ast.ASTQueryTranslatorFactory</prop> 
  				<prop key="hibernate.show_sql">${hibernateShowSql}</prop> 
  				<prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop> 
  				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop> 
   			</props>
  		</property>

 		<property name="schemaUpdate">
  			<value>true</value> 
  		</property>
  	</bean>



    <!-- create a transactionManager bean from the SessionFactory -->
    <bean id="myshowcase.hibernate.TransactionManager" 
            class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="myshowcase.hibernate.SessionFactory" />
        </property>
    </bean>

</beans>
